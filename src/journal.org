#+TITLE: [Diario delle lezioni] Informatica @ DSS 2019/2020 - (E-N)

Qui potete trovare  tutte le informazioni riguardo  il contenuto delle
lezioni,  ed il  relativo  materiale. Tenete  d'occhio questa  pagina.

* <2019-11-06 mer> Lezione 14 - Esercizi su liste

  Altri esercizi su liste e sequenze

  - esercizio: calcolo di massimo e minimo;
  - esercizio: verificare che una sequenza sia ordinata;
  - funzioni =sum=, =min=, =max=.
    
  Poi  vedremo   l'uso  di   parametri  opzionali  per   le  funzioni.

  - esercizio: minimo in un segmento della lista;
  - esercizio: somma di un segmento della lista;
  - esempi con =sorted=.

  *Lavoro assegnato:* Leggere i paragrafi 3.9, 5.8, 5.9 e 5.10.

* <2019-11-04 Mon> Laboratorio 6

  Esercitazione da fare in laboratorio: [[file:docs/lab06.pdf][scarica]].

   |------------------+------------------------------|
   | Esercizio        | file di test                 |
   |------------------+------------------------------|
   | Somma di liste   | [[file:code/test_lab06sommaliste.py][test_lab06sommaliste.py]]      |
   | Prodotto scalare | [[file:code/test_lab06prodottoscalare.py][test_lab06prodottoscalare.py]] |
   | Separa  elementi | [[file:code/test_lab06separa.py][test_lab06separa.py]]          |
   | Intersezione     | [[file:code/test_lab06intersezione.py][test_lab06intersezione.py]]    |
   | Unione           | [[file:code/test_lab06unione.py][test_lab06unione.py]]          |
   |------------------+------------------------------|
  
  Man mano che  lavorate sui vostri esercizi potete  testare le vostre
  soluzioni eseguendo i file di test corrispondenti.

* <2019-10-31 gio> Lezione 13 - Ancora su liste e sequenze

  Continuiamo con le liste, e allarghiamo  il discorso a quelle che in
  Python vengono definite ``sequenze''

  - cancellazione di elementi dalla lista
  - metodo =clear=, =index=, =insert=
  - metodo =pop= (con argomento e senza) e =remove=
  - cooperazione tra stringhe e liste: =join= e =split= 
  - differenza tra stringhe e liste: =count=
  - la tupla: una versione immutabile della lista
  - chiarimenti su =range=
  - liste, stringhe, tuple e =range= sono sequenze
  - =help= su metodi
  - esercizio: somma di numeri
  - esercizio: somma cumulativa

  *Lavoro assegnato:* fare gli esercizi da 10.2 a 10.5 e il 10.8. 

* <2019-10-30 mer> Lezione 12 - Liste

  Introduciamo  un  utilissimo  modo   di  strutturare  dati  in  modo
  sequenziale, ovvero le liste. Le liste sono uno dei tipi di dati più
  utilizzati in python.

  - definizione di liste
  - indicizzazione e slicing
  - mutabilità (*argomento delicato e importante*)
  - variabili come riferimenti a memoria
  - ciclo su lista, per indici e per valori
  - operazioni di concatenazione =+= e ripetizione =*=
  - operatore =in=
  - differenza tra =in= per liste e stringhe
  - metodi =append=, =extend=, =sort=, =count=  
  - funzioni =len= e =sorted=
  - differenza tra =append= e =extend=
  - funzioni che modificano/non modificano la lista
  - copiare una lista
  - differenza tra copia e assegnamento tra liste

  *Lavoro assegnato:* rileggere il capitolo  10 e fare gli esercizi da
  10.2 a 10.5 e il 10.8.

* <2019-10-28 lun> Laboratorio 5

  Esercitazione da fare in laboratorio: [[file:docs/lab05.pdf][scarica]].

  File di test: [[file:code/test_lab05.py][test_lab05.py]]

  Per la prima  volta l'esercitazione sarà munita di un  file di test,
  simile a quello  che userete per l'esame. Vedremo  come usare questi
  file di test per aiutarsi a scrivere dei programmi corretti.

  In breve, dovete scrivere le  funzioni che risolvono gli esercizi in
  un file  =lab05.py=, e  queste funzioni  che avete  scritto verranno
  usate  dal  programma  =test_lab05.py= nei  test.  Più  precisamente
  dovrete:

  - scaricare il file =test_lab05.py=
  - salvare le vostre funzioni in un file =lab05.py=
  - metterli nella stessa cartella

Man mano  che lavorate  sui vostri esercizi  potete testare  le vostre
soluzioni eseguendo.

#+begin_example
$ python3 test_lab05.py
#+end_example

  *Lavoro  assegnato:*  leggere il capitolo 10 del libro di testo.

* <2019-10-24 gio> Lezione 11 - Stringhe e scrittura di moduli

  Vediamo come le stringhe  possano essere considerate delle sequenze,
  e come si  possa lavorare su di essere usando  l'indicizzazione e lo
  slicing.  Vediamo  anche  come utilizzare  alcuno  ``metodi''  delle
  stringhe. Poi discutiamo l'uso e  la gestione dei moduli python, per
  scrivere programmi su file multipli.
  
  Abbiamo introdotto il  ciclo =for= su caratteri di una  stringa e su
  sequenze di interi ottenute tramite la funzione =range=.
  
#+BEGIN_SRC python :exports both :results output
X = 'stringa di prova'

# Ciclo while
i = 0
while i < len(X):
    print(X[i], end='-')
    i += 1

print('')

# Ciclo For su indici
for t in range(len(X)):
    print(X[t], end='-')

print('')

# Ciclo For su caratteri
for c in X:
    print(c, end='-')
#+END_SRC

#+RESULTS:
: s-t-r-i-n-g-a- -d-i- -p-r-o-v-a-
: s-t-r-i-n-g-a- -d-i- -p-r-o-v-a-
: s-t-r-i-n-g-a- -d-i- -p-r-o-v-a-
  


  *Materiale didattico*

  Uso e scrittura di moduli: ([[file:docs/moduli-slides.pdf][schermo]]|[[file:docs/moduli-print.pdf][stampa]])
 
  *Lavoro  assegnato:*  ripetere   gli  esercizi  delle  esercitazioni
  inserendo del codice per la gestione dei parametri sbagliati, usando
  =TypeError= e =ValueError= dove appropriato.

* <2019-10-23 mer> Lezione 10 - Stack, frame e gestione errori

  Abbiamo visto come cercare le triple pitagoriche con cicli annidati.

#+BEGIN_SRC python :exports both :results output
N = 15

a = 1
while a <= N:
    b = a+1
    while b <= N:
        c = b+1
        while c <= N:
            if a**2 + b**2 == c**2:
                print(a,b,c)
            c += 1 
        b += 1
    a += 1
#+END_SRC

#+RESULTS:
: 3 4 5
: 5 12 13
: 6 8 10
: 9 12 15

  
  Vediamo degli esempi tramite Thonny, e in particolare come evolve lo
  /stack/ delle chiamate a funzione. In questo contesto discutiamo

  Visibilità delle variabili
#+BEGIN_SRC python :exports code :results output
# Questa funzione ridefinisce x
def prova():
    x = 6       # x interna, che
                # nasconde eventuali x
                # esterne
    print(x)

x = 10          # x esterna
prova()    
print(x)        # x esterna è immutata
#+END_SRC

  Chiamate di funzioni  annidate e frame di  esecuzione (paragrafo 3.9
  del libro)
#+BEGIN_SRC python :exports code :results output
def livello_esterno(x):
    print("Entro nel livello esterno col valore ",x)
    livello_medio(21)
    print("Esco dal livello esterno col valore",x)

def livello_medio(y):
    print("Entro nel livello medio col valore ",y)
    livello_interno('aaa')
    print("Esco dal livello medio col valore",y)

def livello_interno(z):
    print("Entro nel livello interno col valore ",z)
    print("Esco dal livello interno col valore",z)

    
print("Corpo principale del programma")
livello_esterno(1.2)
print("fine")
#+END_SRC


  Vediamo anche  come sollevare  errori, simili  a quelli  che solleva
  Python in certe condizioni.

  *Materiale didattico*

  Gestione degli errori: ([[file:docs/gestionerrori-slides.pdf][schermo]]|[[file:docs/gestionerrori-print.pdf][stampa]])
 
  *Lavoro  assegnato:* leggere il Capitolo 8.

* <2019-10-21 lun> Laboratorio 4

  Esercitazione da fare in laboratorio: [[file:docs/lab04.pdf][scarica]].

  Prima   di  iniziare   l'esercitazione  vedremo   un  pochino   come
  funziona Thonny.

  *Lavoro  assegnato:*  leggere l'appendice A del libro di testo.

* <2019-10-17 Thu> Lezione 9 - Ancora sul ciclo =while=

  Abbiamo visto altri esempi di come usare il ciclo =while=, ed esempi
  di cili annidati.

  *Materiale didattico*

  Ciclo =while=: ([[file:docs/ciclowhile-slides.pdf][schermo]]|[[file:docs/ciclowhile-print.pdf][stampa]])

  *Lavoro assegnato:*  Installare e  usare Thonny. Provare  a scrivere
  e modificare  gli esercizi presenti  nelle slide, usando  Thonny per
  il debug.

* <2019-10-16 mer> Lezione 8 - Iterazione 

  Abbiamo visto come ripetere l'esecuzione di blocchi di codice con il
  costrutto =while=. Abbiamo visto degli esempi di come usare il ciclo
  =while=.

  *Materiale didattico*

  Ciclo =while=: ([[file:docs/ciclowhile-slides.pdf][schermo]]|[[file:docs/ciclowhile-print.pdf][stampa]])


  *Lavoro  assegnato:*  ri-leggere il Capitolo 7.

* <2019-10-14 lun> Laboratorio 3

  Esercitazione da fare in laboratorio: [[file:docs/lab03.pdf][scarica]].

  Prima di  iniziare l'esercitazione abbiamo discusso  di come gestire
  l'indentazione, e più  in particolare di come  risolvere il problema
  delle  tabulazioni mischiate  a  spazi. Nel  materiale didattico  di
  questa lezione potrete trovare delle slide a riguardo.

  Oltretutto gli esercizi di oggi  hanno previsto la spiegazione degli
  assegnamenti multipli e del ritorno di valori multipli.

  *Materiale didattico*

  Indentazione: ([[file:docs/indentazione-slides.pdf][schermo]]|[[file:docs/indentazione-print.pdf%0A][stampa]])

  *Lavoro  assegnato:*  leggere il Capitolo 7.

* <2019-10-10 gio> Lezione 7 - Ancora Esercizi (2)

  Vediamo   qualche  piccola   nozione   aggiuntiva  sulle   stringhe:
  - caratteri non stampabili
  - confronti tra stringhe
  - operatore =in=
  - valore =None= e tipo =NoneType=
    
  Poi vediamo insieme come fare un esercizio della scorsa esercitazione.

  *Lavoro assegnato:* rivedere gli esercizi della scorsa esercitazione
  e  provare   a  completarli,  inserendo  anche   delle  stringhe  di
  documentazione.     *Mi     raccomando*     di     completare     il
  questionario finale.

* <2019-10-09 mer> Lezione 6 - Esercizi sulle funzioni

  Abbiamo  visto  come  scrivere  una funzione  passo  passo,  e  come
  perfezionarla   e  inserirla   nel   contensto   di  un   programma.
  Abbiamo  anche visto  come  inserire una  stringa di  documentazione
  nella  funzione.  In  questo  contesto  abbiamo  visto  le  stringhe
  multilinea (ovvero quelle aperte e chiuse da tre apici o virgolette).

  Insieme abbiamo scritto il programma:

#+BEGIN_SRC python :exports both :results output
def hello(nome,età):
    """Produce un saluto personalizzato
    
    Questa funzione produce un saluto di presentazione
    che include le informazioni di `nome` ed `età`.
    """
    coda = " anni."
    if età == 1:
        coda = " anno."
    return "Ciao, sono "+nome+". Ho "+str(età)+coda

def stampa_incorniciato(testo):
    lunghezza = len(testo) 
    cornice = '*' * (lunghezza + 4) 
    print(cornice)
    print("* "+testo+' *')
    print(cornice)

stampa_incorniciato(hello('Marcello',23))
stampa_incorniciato("Testo arbitrario.")
stampa_incorniciato(hello('Giulia',1))
#+END_SRC

#+RESULTS:
: ************************************
: * Ciao, sono Marcello. Ho 23 anni. *
: ************************************
: *********************
: * Testo arbitrario. *
: *********************
: *********************************
: * Ciao, sono Giulia. Ho 1 anno. *
: *********************************
  

  *Lavoro assegnato:* rivedere gli esercizi della scorsa esercitazione
  e  provare   a  completarla.   *Mi  raccomando*  di   completare  il
  questionario finale.

* <2019-10-07 lun> Laboratorio 2

  Esercitazione da fare in laboratorio: [[file:docs/lab02.pdf][scarica]].

  *Lavoro  assegnato:*  leggere i paragrafi da 6.1 a 6.4 inclusi.

* <2019-10-03 mer> Lezione 5 - Uso e scrittura di funzioni

  Spieghiamo cos'è una  funzione e vediamo quelle già  usate a lezione
  più altre  incluse nel modulo  =math=. Come si scrive  una funzione?
  Passaggio  di   parametri,  e   differenza  tra   parametri  formali
  e attuali. Visibilità  delle variabili, fuori e  dentro la funzione.
  Funzioni che restituiscono dei valori.
  
  *Lavoro  assegnato:* scrivere i seguenti programmi

  - Una funzione  =scontato(prezzo,sconto)=, che verifichi se  lo sconto
    è un numero valido (ovvero se sia  compreso tra 0 e 100) e in caso
    positivo stampi il prezzo scontato.

  -  scrivere  una   funzione  =eqsecondogrado(A,B,C)=,   che  calcoli
    e stampi le soluzioni dell'equazione di secondo grado $Ax^2 + Bx +
    C =0$.

  - scrivere una funzione =ordina(A,B,C)= che stampi in ordine dal più
    piccolo  al più  grande  i valori  (non necessariamente  numerici)
    passati come argomenti.  Non vi preoccupate di  gestire gli errori
    dovuti  al  passaggio  di  argomenti che  non  sono  confrontabili
    tra loro.
  
* <2019-10-02 mer> Lezione 4 - Esecuzione condizionale

  Vediamo  come fare  in modo  che il  programma faccia  delle scelte.
  In  primo luogo  introduciamo il  tipo booleano  che rappresenta  la
  scelta vero/falso.  Vediamo poi come costruire  espressioni booleane
  usando operatori logici e di confronto.

  L'uso  principale   di  queste  espressioni  logiche   è  quello  di
  condizioni  in base  alle quali  eseguire  o meno  pezzi di  codice.
  Introduciamo  le  clausole  =if=, =else=,  =elif=  per  l'esecuzione
  codizionale di blocchi di istruzioni.

  *Materiale didattico*

  Il vero e il falso: ([[file:docs/veroefalso-slides.pdf][schermo]]|[[file:docs/veroefalso-print.pdf][stampa]])
  
  Logica booleana: ([[file:docs/logicabooleana-slides.pdf][schermo]]|[[file:docs/logicabooleana-print.pdf][stampa]])

  *Lavoro assegnato:* leggere il capitolo 3 del libro di testo.

* <2019-09-30 Mon> Laboratorio 1

  Esercitazione da fare in laboratorio: [[file:docs/lab01.pdf][scarica]].

  *Lavoro  assegnato:*  leggere i paragrafi da 5.1 a 5.7 inclusi.

* <2019-09-26 gio> Lezione 3 - Scrivere programmi 

  Recuperiamo alcune cose  che non siamo riusciti a  fare alla lezione
  precedente  per problemi  logistici.  Vediamo  l'uso delle  funzioni
  =type=, =print= e degli operatori su stringhe.

  Vediamo come  si definisce e si  usa una variable, e  poi cominciamo
  a scrivere programmi minimali su file, per poi eseguirli. Vediamo la
  differenza nell'output tra sessione interattiva e programma eseguito
  da file.

  *Lavoro  assegnato:*  provare a  scrivere  ed  eseguire sequenze  di
  istruzioni  salvate  su  file.  O  con  =pythonanywhere.com=  oppure
  installando python sul vostro computer.

* <2019-09-25 mer> Lezione 2 - Cos'è la programmazione

  Discutiamo prevemente la struttura di  un calcolatore e alcune delle
  persone  coinvolte nel  suo sviluppo.  Spieghiamo la  differenza tra
  linguaggi naturali e artificiali, linguaggi di alto e basso livello,
  linguaggi compilati e interpretati.
   
  Nella  seconda  parte  della   lezione  cominciamo  a  vedere  delle
  operazioni interattive con python.  In questo contesto discutiamo il
  concetto  di  valore e  tipo  del  dato,  e vediamo  come  costruire
  espressioni utilizzando operazioni (aritmetiche e non) tra dati.
  
  Brevemente  vediamo una  carrellata di  possibilità per  lavorare in
  ambiente python. 

  *Materiale didattico*

  Cos'è la programmazione: ([[file:docs/introprogrammazione-slides.pdf][schermo]]|[[file:docs/introprogrammazione-print.pdf][stampa]])
  
  Ambienti di lavoro python: ([[file:docs/usarepython-slides.pdf][schermo]]|[[file:docs/usarepython-print.pdf][stampa]])

  *Lavoro assegnato:* leggere il capitolo 2 del libro di testo.

* <2019-09-23 Mon> Lezione 1 - Introduzione

  Abbiamo introdotto il corso,  fornendo le informazioni logistiche di
  base. Poi abbiamo visto come  effettuare i primi passi nell'ambiente
  linux  del  laboratorio: come  trovare  i  programmi necessari  allo
  svolgimento delle esercitazioni e come utilizzare il terminale.
   
  *Materiale didattico*

  Introduzione: ([[file:docs/opening-slides.pdf][schermo]]|[[file:docs/opening-print.pdf][stampa]])
  
  Tutorial al laboratorio: ([[file:docs/tutorial_lab-slides.pdf][schermo]]|[[file:docs/tutorial_lab-print.pdf][stampa]])

  *Lavoro assegnato:* leggere il capitolo 1 del libro di testo.

